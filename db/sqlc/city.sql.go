// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: city.sql

package db

import (
	"context"
)

const createCity = `-- name: CreateCity :one
INSERT INTO cities (name,city_code,is_active) 
VALUES ($1,$2,$3) 
RETURNING id, name, city_code, created_at, is_active
`

type CreateCityParams struct {
	Name     string `json:"name"`
	CityCode string `json:"city_code"`
	IsActive bool   `json:"is_active"`
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) (Cities, error) {
	row := q.db.QueryRowContext(ctx, createCity, arg.Name, arg.CityCode, arg.IsActive)
	var i Cities
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityCode,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getCities = `-- name: GetCities :many
SELECT id, name, city_code, created_at, is_active FROM cities
`

func (q *Queries) GetCities(ctx context.Context) ([]Cities, error) {
	rows, err := q.db.QueryContext(ctx, getCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cities{}
	for rows.Next() {
		var i Cities
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CityCode,
			&i.CreatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
