// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: city.sql

package db

import (
	"context"
	"time"
)

const createCity = `-- name: CreateCity :one
INSERT INTO cities (name,city_code,is_active) 
VALUES ($1,$2,$3) 
RETURNING id, name, city_code, created_at, is_active
`

type CreateCityParams struct {
	Name     string `json:"name"`
	CityCode string `json:"city_code"`
	IsActive bool   `json:"is_active"`
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) (Cities, error) {
	row := q.db.QueryRowContext(ctx, createCity, arg.Name, arg.CityCode, arg.IsActive)
	var i Cities
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityCode,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getCities = `-- name: GetCities :many
SELECT id, name, city_code, created_at, is_active FROM cities
`

func (q *Queries) GetCities(ctx context.Context) ([]Cities, error) {
	rows, err := q.db.QueryContext(ctx, getCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cities{}
	for rows.Next() {
		var i Cities
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CityCode,
			&i.CreatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCity = `-- name: UpdateCity :one
UPDATE cities
SET name = $2,
    city_code = $3,
    is_active = $4
WHERE id = $1
RETURNING id, name, city_code, is_active, created_at
`

type UpdateCityParams struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	CityCode string `json:"city_code"`
	IsActive bool   `json:"is_active"`
}

type UpdateCityRow struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	CityCode  string    `json:"city_code"`
	IsActive  bool      `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) UpdateCity(ctx context.Context, arg UpdateCityParams) (UpdateCityRow, error) {
	row := q.db.QueryRowContext(ctx, updateCity,
		arg.ID,
		arg.Name,
		arg.CityCode,
		arg.IsActive,
	)
	var i UpdateCityRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CityCode,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
